package querio
// querioVersion: 0

import java.sql.ResultSet

//
// Do not edit! Generated by querio.codegen.SelfClassesGenerator
//
trait SelectTraitGenerated extends SqlQuery {
  def select[V1, V2](field1: ElTable[V1], field2: ElTable[V2]): SelectFromStep[(V1, V2)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    new SqlBuilder2[V1, V2](buf, field1, field2)
  }
  def select[R, V1, V2](fn: (V1, V2) => R, field1: ElTable[V1], field2: ElTable[V2]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    new SqlBuilderCase2[R, V1, V2](buf, fn, field1, field2)
  }
  def select[V1, V2, V3](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3]): SelectFromStep[(V1, V2, V3)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    new SqlBuilder3[V1, V2, V3](buf, field1, field2, field3)
  }
  def select[R, V1, V2, V3](fn: (V1, V2, V3) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    new SqlBuilderCase3[R, V1, V2, V3](buf, fn, field1, field2, field3)
  }
  def select[V1, V2, V3, V4](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4]): SelectFromStep[(V1, V2, V3, V4)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    new SqlBuilder4[V1, V2, V3, V4](buf, field1, field2, field3, field4)
  }
  def select[R, V1, V2, V3, V4](fn: (V1, V2, V3, V4) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    new SqlBuilderCase4[R, V1, V2, V3, V4](buf, fn, field1, field2, field3, field4)
  }
  def select[V1, V2, V3, V4, V5](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5]): SelectFromStep[(V1, V2, V3, V4, V5)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    new SqlBuilder5[V1, V2, V3, V4, V5](buf, field1, field2, field3, field4, field5)
  }
  def select[R, V1, V2, V3, V4, V5](fn: (V1, V2, V3, V4, V5) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    new SqlBuilderCase5[R, V1, V2, V3, V4, V5](buf, fn, field1, field2, field3, field4, field5)
  }
  def select[V1, V2, V3, V4, V5, V6](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6]): SelectFromStep[(V1, V2, V3, V4, V5, V6)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    new SqlBuilder6[V1, V2, V3, V4, V5, V6](buf, field1, field2, field3, field4, field5, field6)
  }
  def select[R, V1, V2, V3, V4, V5, V6](fn: (V1, V2, V3, V4, V5, V6) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    new SqlBuilderCase6[R, V1, V2, V3, V4, V5, V6](buf, fn, field1, field2, field3, field4, field5, field6)
  }
  def select[V1, V2, V3, V4, V5, V6, V7](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    new SqlBuilder7[V1, V2, V3, V4, V5, V6, V7](buf, field1, field2, field3, field4, field5, field6, field7)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7](fn: (V1, V2, V3, V4, V5, V6, V7) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    new SqlBuilderCase7[R, V1, V2, V3, V4, V5, V6, V7](buf, fn, field1, field2, field3, field4, field5, field6, field7)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    new SqlBuilder8[V1, V2, V3, V4, V5, V6, V7, V8](buf, field1, field2, field3, field4, field5, field6, field7, field8)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8](fn: (V1, V2, V3, V4, V5, V6, V7, V8) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    new SqlBuilderCase8[R, V1, V2, V3, V4, V5, V6, V7, V8](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    new SqlBuilder9[V1, V2, V3, V4, V5, V6, V7, V8, V9](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    new SqlBuilderCase9[R, V1, V2, V3, V4, V5, V6, V7, V8, V9](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    new SqlBuilder10[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    new SqlBuilderCase10[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    new SqlBuilder11[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    new SqlBuilderCase11[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    new SqlBuilder12[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    new SqlBuilderCase12[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    new SqlBuilder13[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    new SqlBuilderCase13[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    new SqlBuilder14[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    new SqlBuilderCase14[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    new SqlBuilder15[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    new SqlBuilderCase15[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    new SqlBuilder16[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    new SqlBuilderCase16[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    new SqlBuilder17[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    new SqlBuilderCase17[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    new SqlBuilder18[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    new SqlBuilderCase18[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    new SqlBuilder19[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    new SqlBuilderCase19[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    new SqlBuilder20[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    new SqlBuilderCase20[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20], field21: ElTable[V21]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    buf ++ ", "; field21._renderFields
    new SqlBuilder21[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20], field21: ElTable[V21]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    buf ++ ", "; field21._renderFields
    new SqlBuilderCase21[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21)
  }
  def select[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20], field21: ElTable[V21], field22: ElTable[V22]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22)] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    buf ++ ", "; field21._renderFields
    buf ++ ", "; field22._renderFields
    new SqlBuilder22[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21, field22)
  }
  def select[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20], field21: ElTable[V21], field22: ElTable[V22]): SelectFromStep[R] = {
    buf ++ "select "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    buf ++ ", "; field21._renderFields
    buf ++ ", "; field22._renderFields
    new SqlBuilderCase22[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21, field22)
  }
}


trait SelectFlagOfStepGenerated extends SqlQuery {
  def of[V1, V2](field1: ElTable[V1], field2: ElTable[V2]): SelectFromStep[(V1, V2)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    new SqlBuilder2[V1, V2](buf, field1, field2)
  }
  def of[R, V1, V2](fn: (V1, V2) => R, field1: ElTable[V1], field2: ElTable[V2]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    new SqlBuilderCase2[R, V1, V2](buf, fn, field1, field2)
  }
  def of[V1, V2, V3](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3]): SelectFromStep[(V1, V2, V3)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    new SqlBuilder3[V1, V2, V3](buf, field1, field2, field3)
  }
  def of[R, V1, V2, V3](fn: (V1, V2, V3) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    new SqlBuilderCase3[R, V1, V2, V3](buf, fn, field1, field2, field3)
  }
  def of[V1, V2, V3, V4](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4]): SelectFromStep[(V1, V2, V3, V4)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    new SqlBuilder4[V1, V2, V3, V4](buf, field1, field2, field3, field4)
  }
  def of[R, V1, V2, V3, V4](fn: (V1, V2, V3, V4) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    new SqlBuilderCase4[R, V1, V2, V3, V4](buf, fn, field1, field2, field3, field4)
  }
  def of[V1, V2, V3, V4, V5](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5]): SelectFromStep[(V1, V2, V3, V4, V5)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    new SqlBuilder5[V1, V2, V3, V4, V5](buf, field1, field2, field3, field4, field5)
  }
  def of[R, V1, V2, V3, V4, V5](fn: (V1, V2, V3, V4, V5) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    new SqlBuilderCase5[R, V1, V2, V3, V4, V5](buf, fn, field1, field2, field3, field4, field5)
  }
  def of[V1, V2, V3, V4, V5, V6](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6]): SelectFromStep[(V1, V2, V3, V4, V5, V6)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    new SqlBuilder6[V1, V2, V3, V4, V5, V6](buf, field1, field2, field3, field4, field5, field6)
  }
  def of[R, V1, V2, V3, V4, V5, V6](fn: (V1, V2, V3, V4, V5, V6) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    new SqlBuilderCase6[R, V1, V2, V3, V4, V5, V6](buf, fn, field1, field2, field3, field4, field5, field6)
  }
  def of[V1, V2, V3, V4, V5, V6, V7](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    new SqlBuilder7[V1, V2, V3, V4, V5, V6, V7](buf, field1, field2, field3, field4, field5, field6, field7)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7](fn: (V1, V2, V3, V4, V5, V6, V7) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    new SqlBuilderCase7[R, V1, V2, V3, V4, V5, V6, V7](buf, fn, field1, field2, field3, field4, field5, field6, field7)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    new SqlBuilder8[V1, V2, V3, V4, V5, V6, V7, V8](buf, field1, field2, field3, field4, field5, field6, field7, field8)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8](fn: (V1, V2, V3, V4, V5, V6, V7, V8) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    new SqlBuilderCase8[R, V1, V2, V3, V4, V5, V6, V7, V8](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    new SqlBuilder9[V1, V2, V3, V4, V5, V6, V7, V8, V9](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    new SqlBuilderCase9[R, V1, V2, V3, V4, V5, V6, V7, V8, V9](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    new SqlBuilder10[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    new SqlBuilderCase10[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    new SqlBuilder11[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    new SqlBuilderCase11[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    new SqlBuilder12[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    new SqlBuilderCase12[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    new SqlBuilder13[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    new SqlBuilderCase13[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    new SqlBuilder14[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    new SqlBuilderCase14[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    new SqlBuilder15[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    new SqlBuilderCase15[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    new SqlBuilder16[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    new SqlBuilderCase16[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    new SqlBuilder17[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    new SqlBuilderCase17[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    new SqlBuilder18[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    new SqlBuilderCase18[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    new SqlBuilder19[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    new SqlBuilderCase19[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    new SqlBuilder20[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    new SqlBuilderCase20[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20], field21: ElTable[V21]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    buf ++ ", "; field21._renderFields
    new SqlBuilder21[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20], field21: ElTable[V21]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    buf ++ ", "; field21._renderFields
    new SqlBuilderCase21[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21)
  }
  def of[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20], field21: ElTable[V21], field22: ElTable[V22]): SelectFromStep[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22)] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    buf ++ ", "; field21._renderFields
    buf ++ ", "; field22._renderFields
    new SqlBuilder22[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](buf, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21, field22)
  }
  def of[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) => R, field1: ElTable[V1], field2: ElTable[V2], field3: ElTable[V3], field4: ElTable[V4], field5: ElTable[V5], field6: ElTable[V6], field7: ElTable[V7], field8: ElTable[V8], field9: ElTable[V9], field10: ElTable[V10], field11: ElTable[V11], field12: ElTable[V12], field13: ElTable[V13], field14: ElTable[V14], field15: ElTable[V15], field16: ElTable[V16], field17: ElTable[V17], field18: ElTable[V18], field19: ElTable[V19], field20: ElTable[V20], field21: ElTable[V21], field22: ElTable[V22]): SelectFromStep[R] = {
    buf ++ " "; field1._renderFields
    buf ++ ", "; field2._renderFields
    buf ++ ", "; field3._renderFields
    buf ++ ", "; field4._renderFields
    buf ++ ", "; field5._renderFields
    buf ++ ", "; field6._renderFields
    buf ++ ", "; field7._renderFields
    buf ++ ", "; field8._renderFields
    buf ++ ", "; field9._renderFields
    buf ++ ", "; field10._renderFields
    buf ++ ", "; field11._renderFields
    buf ++ ", "; field12._renderFields
    buf ++ ", "; field13._renderFields
    buf ++ ", "; field14._renderFields
    buf ++ ", "; field15._renderFields
    buf ++ ", "; field16._renderFields
    buf ++ ", "; field17._renderFields
    buf ++ ", "; field18._renderFields
    buf ++ ", "; field19._renderFields
    buf ++ ", "; field20._renderFields
    buf ++ ", "; field21._renderFields
    buf ++ ", "; field22._renderFields
    new SqlBuilderCase22[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](buf, fn, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21, field22)
  }
}


protected class SqlBuilder2[V1, V2](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2]) extends SqlBuilder[(V1, V2)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2) = {
    val v1: V1 = f1._getValue(rs, 1)
    val v2: V2 = f2._getValue(rs, f1._fieldNum + 1)
    (v1, v2)
  }
}

protected class SqlBuilderCase2[R, V1, V2](val buf: SqlBuffer, fn: (V1, V2) => R, f1: ElTable[V1], f2: ElTable[V2]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    val v2: V2 = f2._getValue(rs, f1._fieldNum + 1)
    fn(v1, v2)
  }
}

protected class SqlBuilder3[V1, V2, V3](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3]) extends SqlBuilder[(V1, V2, V3)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx)
    (v1, v2, v3)
  }
}

protected class SqlBuilderCase3[R, V1, V2, V3](val buf: SqlBuffer, fn: (V1, V2, V3) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx)
    fn(v1, v2, v3)
  }
}

protected class SqlBuilder4[V1, V2, V3, V4](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4]) extends SqlBuilder[(V1, V2, V3, V4)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx)
    (v1, v2, v3, v4)
  }
}

protected class SqlBuilderCase4[R, V1, V2, V3, V4](val buf: SqlBuffer, fn: (V1, V2, V3, V4) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx)
    fn(v1, v2, v3, v4)
  }
}

protected class SqlBuilder5[V1, V2, V3, V4, V5](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5]) extends SqlBuilder[(V1, V2, V3, V4, V5)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx)
    (v1, v2, v3, v4, v5)
  }
}

protected class SqlBuilderCase5[R, V1, V2, V3, V4, V5](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5)
  }
}

protected class SqlBuilder6[V1, V2, V3, V4, V5, V6](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6)
  }
}

protected class SqlBuilderCase6[R, V1, V2, V3, V4, V5, V6](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6)
  }
}

protected class SqlBuilder7[V1, V2, V3, V4, V5, V6, V7](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7)
  }
}

protected class SqlBuilderCase7[R, V1, V2, V3, V4, V5, V6, V7](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7)
  }
}

protected class SqlBuilder8[V1, V2, V3, V4, V5, V6, V7, V8](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8)
  }
}

protected class SqlBuilderCase8[R, V1, V2, V3, V4, V5, V6, V7, V8](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8)
  }
}

protected class SqlBuilder9[V1, V2, V3, V4, V5, V6, V7, V8, V9](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9)
  }
}

protected class SqlBuilderCase9[R, V1, V2, V3, V4, V5, V6, V7, V8, V9](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9)
  }
}

protected class SqlBuilder10[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
  }
}

protected class SqlBuilderCase10[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
  }
}

protected class SqlBuilder11[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
  }
}

protected class SqlBuilderCase11[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
  }
}

protected class SqlBuilder12[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
  }
}

protected class SqlBuilderCase12[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
  }
}

protected class SqlBuilder13[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
  }
}

protected class SqlBuilderCase13[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
  }
}

protected class SqlBuilder14[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
  }
}

protected class SqlBuilderCase14[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
  }
}

protected class SqlBuilder15[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
  }
}

protected class SqlBuilderCase15[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
  }
}

protected class SqlBuilder16[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)
  }
}

protected class SqlBuilderCase16[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)
  }
}

protected class SqlBuilder17[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
  }
}

protected class SqlBuilderCase17[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
  }
}

protected class SqlBuilder18[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
  }
}

protected class SqlBuilderCase18[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
  }
}

protected class SqlBuilder19[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18], f19: ElTable[V19]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx); idx += f18._fieldNum
    val v19: V19 = f19._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19)
  }
}

protected class SqlBuilderCase19[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18], f19: ElTable[V19]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx); idx += f18._fieldNum
    val v19: V19 = f19._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19)
  }
}

protected class SqlBuilder20[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18], f19: ElTable[V19], f20: ElTable[V20]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx); idx += f18._fieldNum
    val v19: V19 = f19._getValue(rs, idx); idx += f19._fieldNum
    val v20: V20 = f20._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
  }
}

protected class SqlBuilderCase20[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18], f19: ElTable[V19], f20: ElTable[V20]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx); idx += f18._fieldNum
    val v19: V19 = f19._getValue(rs, idx); idx += f19._fieldNum
    val v20: V20 = f20._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
  }
}

protected class SqlBuilder21[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18], f19: ElTable[V19], f20: ElTable[V20], f21: ElTable[V21]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx); idx += f18._fieldNum
    val v19: V19 = f19._getValue(rs, idx); idx += f19._fieldNum
    val v20: V20 = f20._getValue(rs, idx); idx += f20._fieldNum
    val v21: V21 = f21._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21)
  }
}

protected class SqlBuilderCase21[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18], f19: ElTable[V19], f20: ElTable[V20], f21: ElTable[V21]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx); idx += f18._fieldNum
    val v19: V19 = f19._getValue(rs, idx); idx += f19._fieldNum
    val v20: V20 = f20._getValue(rs, idx); idx += f20._fieldNum
    val v21: V21 = f21._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21)
  }
}

protected class SqlBuilder22[V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](val buf: SqlBuffer, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18], f19: ElTable[V19], f20: ElTable[V20], f21: ElTable[V21], f22: ElTable[V22]) extends SqlBuilder[(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22)] {
  protected def recordFromResultSet(rs: ResultSet): (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx); idx += f18._fieldNum
    val v19: V19 = f19._getValue(rs, idx); idx += f19._fieldNum
    val v20: V20 = f20._getValue(rs, idx); idx += f20._fieldNum
    val v21: V21 = f21._getValue(rs, idx); idx += f21._fieldNum
    val v22: V22 = f22._getValue(rs, idx)
    (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22)
  }
}

protected class SqlBuilderCase22[R, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22](val buf: SqlBuffer, fn: (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) => R, f1: ElTable[V1], f2: ElTable[V2], f3: ElTable[V3], f4: ElTable[V4], f5: ElTable[V5], f6: ElTable[V6], f7: ElTable[V7], f8: ElTable[V8], f9: ElTable[V9], f10: ElTable[V10], f11: ElTable[V11], f12: ElTable[V12], f13: ElTable[V13], f14: ElTable[V14], f15: ElTable[V15], f16: ElTable[V16], f17: ElTable[V17], f18: ElTable[V18], f19: ElTable[V19], f20: ElTable[V20], f21: ElTable[V21], f22: ElTable[V22]) extends SqlBuilder[R] {
  protected def recordFromResultSet(rs: ResultSet): (R) = {
    val v1: V1 = f1._getValue(rs, 1)
    var idx = f1._fieldNum + 1
    val v2: V2 = f2._getValue(rs, idx); idx += f2._fieldNum
    val v3: V3 = f3._getValue(rs, idx); idx += f3._fieldNum
    val v4: V4 = f4._getValue(rs, idx); idx += f4._fieldNum
    val v5: V5 = f5._getValue(rs, idx); idx += f5._fieldNum
    val v6: V6 = f6._getValue(rs, idx); idx += f6._fieldNum
    val v7: V7 = f7._getValue(rs, idx); idx += f7._fieldNum
    val v8: V8 = f8._getValue(rs, idx); idx += f8._fieldNum
    val v9: V9 = f9._getValue(rs, idx); idx += f9._fieldNum
    val v10: V10 = f10._getValue(rs, idx); idx += f10._fieldNum
    val v11: V11 = f11._getValue(rs, idx); idx += f11._fieldNum
    val v12: V12 = f12._getValue(rs, idx); idx += f12._fieldNum
    val v13: V13 = f13._getValue(rs, idx); idx += f13._fieldNum
    val v14: V14 = f14._getValue(rs, idx); idx += f14._fieldNum
    val v15: V15 = f15._getValue(rs, idx); idx += f15._fieldNum
    val v16: V16 = f16._getValue(rs, idx); idx += f16._fieldNum
    val v17: V17 = f17._getValue(rs, idx); idx += f17._fieldNum
    val v18: V18 = f18._getValue(rs, idx); idx += f18._fieldNum
    val v19: V19 = f19._getValue(rs, idx); idx += f19._fieldNum
    val v20: V20 = f20._getValue(rs, idx); idx += f20._fieldNum
    val v21: V21 = f21._getValue(rs, idx); idx += f21._fieldNum
    val v22: V22 = f22._getValue(rs, idx)
    fn(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22)
  }
}

