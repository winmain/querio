package querio.codegen

import java.io.File
import scalax.file.ImplicitConversions.jfile2path

/**
 * Генератор самих классов библиотеки.
 */
object SelfClassesGenerator {

  def genSelectSelectStep(p: SourcePrinter) {
    p pkg GeneratorConfig.libPackage
    p imp "java.sql.ResultSet"

    p ++ "//" n()
    p ++ "// Do not edit! Generated by querio.codegen.SelfClassesGenerator" n()
    p ++ "//" n()

    // traits SelectTraitGenerated, SelectFlagStepGenerated
    def selects(traitName: String, defName: String, sqlPrefix: String) = {
      p ++ "trait " ++ traitName ++ " extends SqlQuery" block {
        // select methods
        for (arity <- 2 to GeneratorConfig.maxArity) {
          val vs = (1 to arity).map(a => "V" + a).mkString(", ")
          p ++ "def " ++ defName ++ "[" ++ vs ++ "]"
          p ++ "(" ++ (1 to arity).map(i => s"field$i: ElTable[V$i]").mkString(", ") ++ ")"
          p ++ ": SelectFromStep[(" ++ vs ++ ")] =" block {
            p ++ "buf ++ \"" ++ sqlPrefix ++ "\"; field1._renderFields" n()
            (2 to arity).foreach { i => p ++ "buf ++ \", \"; field" ++ i ++ "._renderFields" n()}
            p ++ "new SqlBuilder" ++ arity ++ "[" ++ vs ++ "](buf, " ++ (1 to arity).map("field" + _).mkString(", ") ++ ")"
          }

          p ++ "def " ++ defName ++ "[R, " ++ vs ++ "]"
          p ++ "(fn: (" ++ vs ++ ") => R, " ++ (1 to arity).map(i => s"field$i: ElTable[V$i]").mkString(", ") ++ ")"
          p ++ ": SelectFromStep[R] =" block {
            p ++ "buf ++ \"" ++ sqlPrefix ++ "\"; field1._renderFields" n()
            (2 to arity).foreach { i => p ++ "buf ++ \", \"; field" ++ i ++ "._renderFields" n()}
            p ++ "new SqlBuilderCase" ++ arity ++ "[R, " ++ vs ++ "](buf, fn, " ++ (1 to arity).map("field" + _).mkString(", ") ++ ")"
          }
        }
      }
      p n()
      p n()
    }
    selects("SelectTraitGenerated", "select", "select ")
    selects("SelectFlagOfStepGenerated", "of", " ")


    // protected class SqlBuilder$i
    for (arity <- 2 to GeneratorConfig.maxArity) {
      def body(fnName: String): Unit = {
        p block {
          p ++ s"val v1: V1 = f1._getValue(rs, 1)" n()
          if (arity != 2) {
            // arity > 2
            p ++ "var idx = f1._fieldNum + 1" n()
            (2 to arity).foreach { i =>
              p ++ s"val v$i: V$i = f$i._getValue(rs, " ++ (if (i == 1) "1" else "idx") ++ ")"
              if (i < arity) p ++ s"; idx += f$i._fieldNum"
              p n()
            }
          } else {
            // arity == 2
            p ++ s"val v2: V2 = f2._getValue(rs, f1._fieldNum + 1)" n()
          }
          p ++ fnName ++ "(" ++ (1 to arity).map(i => s"v$i").mkString(", ") ++ ")"
        }
      }

      val vs = (1 to arity).map(a => "V" + a).mkString(", ")
      p ++ s"protected class SqlBuilder$arity[$vs](val buf: SqlBuffer, "
      p ++ (1 to arity).map { i => s"f$i: ElTable[V$i]"}.mkString(", ")
      p ++ s") extends SqlBuilder[($vs)]" block {
        p ++ s"protected def recordFromResultSet(rs: ResultSet): ($vs) ="
        body("")
//        p ++ "  (" ++ (1 to arity).map { i => s"f$i._getValue(rs, $i)"}.mkString(", ") ++ ")"
      }
      p n()

      p ++ s"protected class SqlBuilderCase$arity[R, $vs](val buf: SqlBuffer, "
      p ++ s"fn: ($vs) => R, "
      p ++ (1 to arity).map { i => s"f$i: ElTable[V$i]"}.mkString(", ")
      p ++ s") extends SqlBuilder[R]" block {
        p ++ s"protected def recordFromResultSet(rs: ResultSet): (R) ="
//        p ++ "  fn(" ++ (1 to arity).map { i => s"f$i._getValue(rs, $i)"}.mkString(", ") ++ ")"
        body("fn")
      }
      p n()
    }
  }

  def generate(orm2SourceDir: File) {
    val p = new SourcePrinter
    genSelectSelectStep(p)
    p.saveToFile(orm2SourceDir \ GeneratorConfig.libPackage.replace('.', '/') \ "generated.scala")
  }

  def main(args: Array[String]) {
    generate(new File(args(0)))
  }
}
